{"version":3,"file":"test_connection.min.js","sources":["../src/test_connection.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript module to test connection to NAAS API.\n *\n * @copyright  2023 ISAE-SUPAERO (https://www.isae-supaero.fr/)\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine('mod_naas/test_connection', ['jquery', 'core/ajax', 'core/str'], function($, ajax, Str) {\n\n    /**\n     * Handle a failed response to the test connection.\n     * @param {jQuery} resultDiv - The div element to display results\n     * @param {Error} error - The error object from the failed request\n     * @param {Promise<string>} failedStringPromise - Promise that resolves to the failure message\n     */\n    function handleFailedResponse(resultDiv, error, failedStringPromise) {\n\n        /**\n         * Show an error.\n         * @param {string} failedMessage\n         */\n        function showError(failedMessage) {\n            resultDiv\n                .addClass(\"alert alert-danger\")\n                .html(`<p>${failedMessage}</p><p>${error.message}</p>`)\n                .show();\n        }\n\n        failedStringPromise\n            .then(showError)\n            .catch(() => showError('Failed!')); // Fallback message\n    }\n\n    return {\n        init: function() {\n            $('#testconnection').on('click', function(e) {\n                e.preventDefault();\n                const resultDiv = $('#connection-result');\n                resultDiv.hide().removeClass();\n\n                // Pre-fetch strings we'll need\n                const successStringPromise = Str.get_string('connection_test_success', 'naas');\n                const failedStringPromise = Str.get_string('connection_test_failed', 'naas');\n\n                ajax.call([{\n                    methodname: 'mod_naas_test_config',\n                    args: {},\n                }])[0].done(function() {\n                    successStringPromise.done(function(successString) {\n                        resultDiv.addClass(\"alert alert-success\").text(successString);\n                        resultDiv.show();\n                    });\n                }).fail(error => handleFailedResponse(resultDiv, error, failedStringPromise));\n             });\n        }\n    };\n});\n"],"names":["define","$","ajax","Str","init","on","e","preventDefault","resultDiv","hide","removeClass","successStringPromise","get_string","failedStringPromise","call","methodname","args","done","successString","addClass","text","show","fail","error","showError","failedMessage","html","message","then","catch","handleFailedResponse"],"mappings":";;;;;;AAsBAA,kCAAmC,CAAC,SAAU,YAAa,aAAa,SAASC,EAAGC,KAAMC,WA0B/E,CACHC,KAAM,WACFH,EAAE,mBAAmBI,GAAG,SAAS,SAASC,GACtCA,EAAEC,uBACIC,UAAYP,EAAE,sBACpBO,UAAUC,OAAOC,oBAGXC,qBAAuBR,IAAIS,WAAW,0BAA2B,QACjEC,oBAAsBV,IAAIS,WAAW,yBAA0B,QAErEV,KAAKY,KAAK,CAAC,CACPC,WAAY,uBACZC,KAAM,MACN,GAAGC,MAAK,WACRN,qBAAqBM,MAAK,SAASC,eAC/BV,UAAUW,SAAS,uBAAuBC,KAAKF,eAC/CV,UAAUa,aAEfC,MAAKC,gBArCUf,UAAWe,MAAOV,8BAMnCW,UAAUC,eACfjB,UACKW,SAAS,sBACTO,kBAAWD,gCAAuBF,MAAMI,iBACxCN,OAGTR,oBACKe,KAAKJ,WACLK,OAAM,IAAML,UAAU,aAsBFM,CAAqBtB,UAAWe,MAAOV"}